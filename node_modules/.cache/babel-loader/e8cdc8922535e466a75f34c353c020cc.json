{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _regeneratorRuntime from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\n\nexport var StaticJsonRpcProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(StaticJsonRpcProvider, _JsonRpcProvider);\n\n  function StaticJsonRpcProvider() {\n    _classCallCheck(this, StaticJsonRpcProvider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StaticJsonRpcProvider).apply(this, arguments));\n  }\n\n  _createClass(StaticJsonRpcProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      var _this = this;\n\n      var _super = Object.create(null, {\n        detectNetwork: {\n          get: function get() {\n            return _get(_getPrototypeOf(StaticJsonRpcProvider.prototype), \"detectNetwork\", _this);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var network;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                network = this.network;\n\n                if (!(network == null)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return _super.detectNetwork.call(this);\n\n              case 4:\n                network = _context.sent;\n\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                } // If still not set, set it\n\n\n                if (this._network == null) {\n                  // A static network does not support \"any\"\n                  defineReadOnly(this, \"_network\", network);\n                  this.emit(\"network\", network, null);\n                }\n\n              case 7:\n                return _context.abrupt(\"return\", network);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return StaticJsonRpcProvider;\n}(JsonRpcProvider);\nexport var UrlJsonRpcProvider = /*#__PURE__*/function (_StaticJsonRpcProvide) {\n  _inherits(UrlJsonRpcProvider, _StaticJsonRpcProvide);\n\n  function UrlJsonRpcProvider(network, apiKey) {\n    var _this2;\n\n    _classCallCheck(this, UrlJsonRpcProvider);\n\n    logger.checkAbstract(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, UrlJsonRpcProvider); // Normalize the Network and API Key\n\n    network = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, \"getNetwork\")(network);\n    apiKey = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, \"getApiKey\")(apiKey);\n    var connection = getStatic(this instanceof UrlJsonRpcProvider ? this.constructor : void 0, \"getUrl\")(network, apiKey);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(UrlJsonRpcProvider).call(this, connection, network));\n\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this2)), \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(function (key) {\n        defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this2)), key, apiKey[key]);\n      });\n    }\n\n    return _this2;\n  }\n\n  _createClass(UrlJsonRpcProvider, [{\n    key: \"_startPending\",\n    value: function _startPending() {\n      logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return false;\n    }\n  }, {\n    key: \"getSigner\",\n    value: function getSigner(address) {\n      return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getSigner\"\n      });\n    }\n  }, {\n    key: \"listAccounts\",\n    value: function listAccounts() {\n      return Promise.resolve([]);\n    } // Return a defaultApiKey if null, otherwise validate the API key\n\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      return apiKey;\n    } // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: \"getUrl\"\n      });\n    }\n  }]);\n\n  return UrlJsonRpcProvider;\n}(StaticJsonRpcProvider);","map":null,"metadata":{},"sourceType":"module"}