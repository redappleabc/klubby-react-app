{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { id } from \"./id\";\nvar padding = new Uint8Array(32);\npadding.fill(0);\nvar NegativeOne = BigNumber.from(-1);\nvar Zero = BigNumber.from(0);\nvar One = BigNumber.from(1);\nvar MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value) {\n  var bytes = arrayify(value);\n  var padOffset = bytes.length % 32;\n\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n\n  return hexlify(bytes);\n}\n\nvar hexTrue = hexZeroPad(One.toHexString(), 32);\nvar hexFalse = hexZeroPad(Zero.toHexString(), 32);\nvar domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nvar domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\n\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(\"invalid domain value for \".concat(JSON.stringify(key)), \"domain.\".concat(key), value);\n    }\n\n    return value;\n  };\n}\n\nvar domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function chainId(value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n\n    return logger.throwArgumentError(\"invalid domain value for \\\"chainId\\\"\", \"domain.chainId\", value);\n  },\n  verifyingContract: function verifyingContract(value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n\n    return logger.throwArgumentError(\"invalid domain value \\\"verifyingContract\\\"\", \"domain.verifyingContract\", value);\n  },\n  salt: function salt(value) {\n    try {\n      var bytes = arrayify(value);\n\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n\n      return hexlify(bytes);\n    } catch (error) {}\n\n    return logger.throwArgumentError(\"invalid domain value \\\"salt\\\"\", \"domain.salt\", value);\n  }\n};\n\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    var match = type.match(/^(u?)int(\\d*)$/);\n\n    if (match) {\n      var signed = match[1] === \"\";\n      var width = parseInt(match[2] || \"256\");\n\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n\n      var boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      var boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        var v = BigNumber.from(value);\n\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(\"value out-of-bounds for \".concat(type), \"value\", value);\n        }\n\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  } // bytesXX\n\n  {\n    var _match = type.match(/^bytes(\\d+)$/);\n\n    if (_match) {\n      var _width = parseInt(_match[1]);\n\n      if (_width === 0 || _width > 32 || _match[1] !== String(_width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n\n      return function (value) {\n        var bytes = arrayify(value);\n\n        if (bytes.length !== _width) {\n          logger.throwArgumentError(\"invalid length for \".concat(type), \"value\", value);\n        }\n\n        return hexPadRight(value);\n      };\n    }\n  }\n\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n\n  return null;\n}\n\nfunction encodeType(name, fields) {\n  return \"\".concat(name, \"(\").concat(fields.map(function (_ref) {\n    var name = _ref.name,\n        type = _ref.type;\n    return type + \" \" + name;\n  }).join(\",\"), \")\");\n}\n\nexport var TypedDataEncoder = /*#__PURE__*/function () {\n  function TypedDataEncoder(types) {\n    _classCallCheck(this, TypedDataEncoder);\n\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {}); // Link struct types to their direct child structs\n\n    var links = {}; // Link structs to structs which contain them as a child\n\n    var parents = {}; // Link all subtypes within a given struct\n\n    var subtypes = {};\n    Object.keys(types).forEach(function (type) {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n\n    var _loop = function _loop(name) {\n      var uniqueNames = {};\n      types[name].forEach(function (field) {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(\"duplicate variable name \".concat(JSON.stringify(field.name), \" in \").concat(JSON.stringify(name)), \"types\", types);\n        }\n\n        uniqueNames[field.name] = true; // Get the base type (drop any array specifiers)\n\n        var baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n\n        if (baseType === name) {\n          logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(baseType)), \"types\", types);\n        } // Is this a base encoding type?\n\n\n        var encoder = getBaseEncoder(baseType);\n\n        if (encoder) {\n          return;\n        }\n\n        if (!parents[baseType]) {\n          logger.throwArgumentError(\"unknown type \".concat(JSON.stringify(baseType)), \"types\", types);\n        } // Add linkage\n\n\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    };\n\n    for (var name in types) {\n      _loop(name);\n    } // Deduce the primary type\n\n\n    var primaryTypes = Object.keys(parents).filter(function (n) {\n      return parents[n].length === 0;\n    });\n\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(\"ambiguous primary types or unused types: \".concat(primaryTypes.map(function (t) {\n        return JSON.stringify(t);\n      }).join(\", \")), \"types\", types);\n    }\n\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]); // Check for circular type references\n\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(type)), \"types\", types);\n      }\n\n      found[type] = true;\n      Object.keys(links[type]).forEach(function (child) {\n        if (!parents[child]) {\n          return;\n        } // Recursively check children\n\n\n        checkCircular(child, found); // Mark all ancestors as having this decendant\n\n        Object.keys(found).forEach(function (subtype) {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n\n    checkCircular(this.primaryType, {}); // Compute each fully describe type\n\n    for (var _name in subtypes) {\n      var st = Object.keys(subtypes[_name]);\n      st.sort();\n      this._types[_name] = encodeType(_name, types[_name]) + st.map(function (t) {\n        return encodeType(t, types[t]);\n      }).join(\"\");\n    }\n  }\n\n  _createClass(TypedDataEncoder, [{\n    key: \"getEncoder\",\n    value: function getEncoder(type) {\n      var encoder = this._encoderCache[type];\n\n      if (!encoder) {\n        encoder = this._encoderCache[type] = this._getEncoder(type);\n      }\n\n      return encoder;\n    }\n  }, {\n    key: \"_getEncoder\",\n    value: function _getEncoder(type) {\n      var _this = this;\n\n      // Basic encoder type (address, bool, uint256, etc)\n      {\n        var encoder = getBaseEncoder(type);\n\n        if (encoder) {\n          return encoder;\n        }\n      } // Array\n\n      var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\n      if (match) {\n        var subtype = match[1];\n        var subEncoder = this.getEncoder(subtype);\n        var length = parseInt(match[3]);\n        return function (value) {\n          if (length >= 0 && value.length !== length) {\n            logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n          }\n\n          var result = value.map(subEncoder);\n\n          if (_this._types[subtype]) {\n            result = result.map(keccak256);\n          }\n\n          return keccak256(hexConcat(result));\n        };\n      } // Struct\n\n\n      var fields = this.types[type];\n\n      if (fields) {\n        var encodedType = id(this._types[type]);\n        return function (value) {\n          var values = fields.map(function (_ref2) {\n            var name = _ref2.name,\n                type = _ref2.type;\n\n            var result = _this.getEncoder(type)(value[name]);\n\n            if (_this._types[type]) {\n              return keccak256(result);\n            }\n\n            return result;\n          });\n          values.unshift(encodedType);\n          return hexConcat(values);\n        };\n      }\n\n      return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n  }, {\n    key: \"encodeType\",\n    value: function encodeType(name) {\n      var result = this._types[name];\n\n      if (!result) {\n        logger.throwArgumentError(\"unknown type: \".concat(JSON.stringify(name)), \"name\", name);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"encodeData\",\n    value: function encodeData(type, value) {\n      return this.getEncoder(type)(value);\n    }\n  }, {\n    key: \"hashStruct\",\n    value: function hashStruct(name, value) {\n      return keccak256(this.encodeData(name, value));\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      return this.encodeData(this.primaryType, value);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(value) {\n      return this.hashStruct(this.primaryType, value);\n    }\n  }, {\n    key: \"_visit\",\n    value: function _visit(type, value, callback) {\n      var _this2 = this;\n\n      // Basic encoder type (address, bool, uint256, etc)\n      {\n        var encoder = getBaseEncoder(type);\n\n        if (encoder) {\n          return callback(type, value);\n        }\n      } // Array\n\n      var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\n      if (match) {\n        var subtype = match[1];\n        var length = parseInt(match[3]);\n\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n\n        return value.map(function (v) {\n          return _this2._visit(subtype, v, callback);\n        });\n      } // Struct\n\n\n      var fields = this.types[type];\n\n      if (fields) {\n        return fields.reduce(function (accum, _ref3) {\n          var name = _ref3.name,\n              type = _ref3.type;\n          accum[name] = _this2._visit(type, value[name], callback);\n          return accum;\n        }, {});\n      }\n\n      return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n  }, {\n    key: \"visit\",\n    value: function visit(value, callback) {\n      return this._visit(this.primaryType, value, callback);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(types) {\n      return new TypedDataEncoder(types);\n    }\n  }, {\n    key: \"getPrimaryType\",\n    value: function getPrimaryType(types) {\n      return TypedDataEncoder.from(types).primaryType;\n    }\n  }, {\n    key: \"hashStruct\",\n    value: function hashStruct(name, types, value) {\n      return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n  }, {\n    key: \"hashDomain\",\n    value: function hashDomain(domain) {\n      var domainFields = [];\n\n      for (var name in domain) {\n        var type = domainFieldTypes[name];\n\n        if (!type) {\n          logger.throwArgumentError(\"invalid typed-data domain key: \".concat(JSON.stringify(name)), \"domain\", domain);\n        }\n\n        domainFields.push({\n          name: name,\n          type: type\n        });\n      }\n\n      domainFields.sort(function (a, b) {\n        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n      });\n      return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n        EIP712Domain: domainFields\n      }, domain);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(domain, types, value) {\n      return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(domain, types, value) {\n      return keccak256(TypedDataEncoder.encode(domain, types, value));\n    } // Replaces all address types with ENS names with their looked up address\n\n  }, {\n    key: \"resolveNames\",\n    value: function resolveNames(domain, types, value, resolveName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var ensCache, encoder, name;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Make a copy to isolate it from the object passed in\n                domain = shallowCopy(domain); // Look up all ENS names\n\n                ensCache = {}; // Do we need to look up the domain's verifyingContract?\n\n                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                  ensCache[domain.verifyingContract] = \"0x\";\n                } // We are going to use the encoder to visit all the base values\n\n\n                encoder = TypedDataEncoder.from(types); // Get a list of all the addresses\n\n                encoder.visit(value, function (type, value) {\n                  if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                  }\n\n                  return value;\n                }); // Lookup each name\n\n                _context.t0 = _regeneratorRuntime.keys(ensCache);\n\n              case 6:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 13;\n                  break;\n                }\n\n                name = _context.t1.value;\n                _context.next = 10;\n                return resolveName(name);\n\n              case 10:\n                ensCache[name] = _context.sent;\n                _context.next = 6;\n                break;\n\n              case 13:\n                // Replace the domain verifyingContract if needed\n                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                  domain.verifyingContract = ensCache[domain.verifyingContract];\n                } // Replace all ENS names with their address\n\n\n                value = encoder.visit(value, function (type, value) {\n                  if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                  }\n\n                  return value;\n                });\n                return _context.abrupt(\"return\", {\n                  domain: domain,\n                  value: value\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"getPayload\",\n    value: function getPayload(domain, types, value) {\n      // Validate the domain fields\n      TypedDataEncoder.hashDomain(domain); // Derive the EIP712Domain Struct reference type\n\n      var domainValues = {};\n      var domainTypes = [];\n      domainFieldNames.forEach(function (name) {\n        var value = domain[name];\n\n        if (value == null) {\n          return;\n        }\n\n        domainValues[name] = domainChecks[name](value);\n        domainTypes.push({\n          name: name,\n          type: domainFieldTypes[name]\n        });\n      });\n      var encoder = TypedDataEncoder.from(types);\n      var typesWithDomain = shallowCopy(types);\n\n      if (typesWithDomain.EIP712Domain) {\n        logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n      } else {\n        typesWithDomain.EIP712Domain = domainTypes;\n      } // Validate the data structures and types\n\n\n      encoder.encode(value);\n      return {\n        types: typesWithDomain,\n        domain: domainValues,\n        primaryType: encoder.primaryType,\n        message: encoder.visit(value, function (type, value) {\n          // bytes\n          if (type.match(/^bytes(\\d*)/)) {\n            return hexlify(arrayify(value));\n          } // uint or int\n\n\n          if (type.match(/^u?int/)) {\n            return BigNumber.from(value).toString();\n          }\n\n          switch (type) {\n            case \"address\":\n              return value.toLowerCase();\n\n            case \"bool\":\n              return !!value;\n\n            case \"string\":\n              if (typeof value !== \"string\") {\n                logger.throwArgumentError(\"invalid string\", \"value\", value);\n              }\n\n              return value;\n          }\n\n          return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n        })\n      };\n    }\n  }]);\n\n  return TypedDataEncoder;\n}();","map":null,"metadata":{},"sourceType":"module"}