{"ast":null,"code":"\"use strict\";\n\nimport _get from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/get\";\nimport _regeneratorRuntime from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/admin/workspace/walletconnect-example-dapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nvar errorGas = [\"call\", \"estimateGas\"];\n\nfunction checkError(method, error, params) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    var e = error.error;\n\n    if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n      return e.data;\n    }\n\n    logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n      error: error,\n      data: \"0x\"\n    });\n  }\n\n  var message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase();\n  var transaction = params.transaction || params.signedTransaction; // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    var error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nvar _constructorGuard = {};\nexport var JsonRpcSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(JsonRpcSigner, _Signer);\n\n  function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n    var _this;\n\n    _classCallCheck(this, JsonRpcSigner);\n\n    logger.checkNew(this instanceof JsonRpcSigner ? this.constructor : void 0, JsonRpcSigner);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JsonRpcSigner).call(this));\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this)), \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this)), \"_address\", _this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this)), \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this)), \"_index\", addressOrIndex);\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this)), \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n\n    return _this;\n  }\n\n  _createClass(JsonRpcSigner, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"connect\"\n      });\n    }\n  }, {\n    key: \"connectUnchecked\",\n    value: function connectUnchecked() {\n      return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      var _this2 = this;\n\n      if (this._address) {\n        return Promise.resolve(this._address);\n      }\n\n      return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n        if (accounts.length <= _this2._index) {\n          logger.throwError(\"unknown account #\" + _this2._index, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getAddress\"\n          });\n        }\n\n        return _this2.provider.formatter.address(accounts[_this2._index]);\n      });\n    }\n  }, {\n    key: \"sendUncheckedTransaction\",\n    value: function sendUncheckedTransaction(transaction) {\n      var _this3 = this;\n\n      transaction = shallowCopy(transaction);\n      var fromAddress = this.getAddress().then(function (address) {\n        if (address) {\n          address = address.toLowerCase();\n        }\n\n        return address;\n      }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n      // wishes to use this, it is easy to specify explicitly, otherwise\n      // we look it up for them.\n\n      if (transaction.gasLimit == null) {\n        var estimate = shallowCopy(transaction);\n        estimate.from = fromAddress;\n        transaction.gasLimit = this.provider.estimateGas(estimate);\n      }\n\n      if (transaction.to != null) {\n        transaction.to = Promise.resolve(transaction.to).then(function (to) {\n          return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var address;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(to == null)) {\n                      _context.next = 2;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", null);\n\n                  case 2:\n                    _context.next = 4;\n                    return this.provider.resolveName(to);\n\n                  case 4:\n                    address = _context.sent;\n\n                    if (address == null) {\n                      logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n\n                    return _context.abrupt(\"return\", address);\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n\n      return resolveProperties({\n        tx: resolveProperties(transaction),\n        sender: fromAddress\n      }).then(function (_ref) {\n        var tx = _ref.tx,\n            sender = _ref.sender;\n\n        if (tx.from != null) {\n          if (tx.from.toLowerCase() !== sender) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n        } else {\n          tx.from = sender;\n        }\n\n        var hexTx = _this3.provider.constructor.hexlifyTransaction(tx, {\n          from: true\n        });\n\n        return _this3.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n          return hash;\n        }, function (error) {\n          return checkError(\"sendTransaction\", error, hexTx);\n        });\n      });\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"signTransaction\"\n      });\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this4 = this;\n\n        var blockNumber, hash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n              case 2:\n                blockNumber = _context3.sent;\n                _context3.next = 5;\n                return this.sendUncheckedTransaction(transaction);\n\n              case 5:\n                hash = _context3.sent;\n                _context3.prev = 6;\n                _context3.next = 9;\n                return poll(function () {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var tx;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.provider.getTransaction(hash);\n\n                          case 2:\n                            tx = _context2.sent;\n\n                            if (!(tx === null)) {\n                              _context2.next = 5;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", undefined);\n\n                          case 5:\n                            return _context2.abrupt(\"return\", this.provider._wrapTransaction(tx, hash, blockNumber));\n\n                          case 6:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, {\n                  oncePoll: this.provider\n                });\n\n              case 9:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                _context3.t0.transactionHash = hash;\n                throw _context3.t0;\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var data, address;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context4.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context4.sent;\n                _context4.next = 6;\n                return this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this5 = this;\n\n        var populated, address;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  return _this5.provider.resolveName(name);\n                });\n\n              case 2:\n                populated = _context5.sent;\n                _context5.next = 5;\n                return this.getAddress();\n\n              case 5:\n                address = _context5.sent;\n                _context5.next = 8;\n                return this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n\n              case 8:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock(password) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var provider, address;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                provider = this.provider;\n                _context6.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context6.sent;\n                return _context6.abrupt(\"return\", provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n\n  return JsonRpcSigner;\n}(Signer);\n\nvar UncheckedJsonRpcSigner = /*#__PURE__*/function (_JsonRpcSigner) {\n  _inherits(UncheckedJsonRpcSigner, _JsonRpcSigner);\n\n  function UncheckedJsonRpcSigner() {\n    _classCallCheck(this, UncheckedJsonRpcSigner);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UncheckedJsonRpcSigner).apply(this, arguments));\n  }\n\n  _createClass(UncheckedJsonRpcSigner, [{\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      var _this6 = this;\n\n      return this.sendUncheckedTransaction(transaction).then(function (hash) {\n        return {\n          hash: hash,\n          nonce: null,\n          gasLimit: null,\n          gasPrice: null,\n          data: null,\n          value: null,\n          chainId: null,\n          confirmations: 0,\n          from: null,\n          wait: function wait(confirmations) {\n            return _this6.provider.waitForTransaction(hash, confirmations);\n          }\n        };\n      });\n    }\n  }]);\n\n  return UncheckedJsonRpcSigner;\n}(JsonRpcSigner);\n\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport var JsonRpcProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(JsonRpcProvider, _BaseProvider);\n\n  function JsonRpcProvider(url, network) {\n    var _this7;\n\n    _classCallCheck(this, JsonRpcProvider);\n\n    logger.checkNew(this instanceof JsonRpcProvider ? this.constructor : void 0, JsonRpcProvider);\n    var networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this7.detectNetwork().then(function (network) {\n            resolve(network);\n          }, function (error) {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(JsonRpcProvider).call(this, networkOrReady)); // Default URL\n\n    if (!url) {\n      url = getStatic(_this7.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this7)), \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(_assertThisInitialized(_assertThisInitialized(_this7)), \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    _this7._nextId = 42;\n    return _this7;\n  }\n\n  _createClass(JsonRpcProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      var _this8 = this;\n\n      if (!this._cache[\"detectNetwork\"]) {\n        this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n        setTimeout(function () {\n          _this8._cache[\"detectNetwork\"] = null;\n        }, 0);\n      }\n\n      return this._cache[\"detectNetwork\"];\n    }\n  }, {\n    key: \"_uncachedDetectNetwork\",\n    value: function _uncachedDetectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var chainId, getNetwork;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return timer(0);\n\n              case 2:\n                chainId = null;\n                _context7.prev = 3;\n                _context7.next = 6;\n                return this.send(\"eth_chainId\", []);\n\n              case 6:\n                chainId = _context7.sent;\n                _context7.next = 19;\n                break;\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](3);\n                _context7.prev = 11;\n                _context7.next = 14;\n                return this.send(\"net_version\", []);\n\n              case 14:\n                chainId = _context7.sent;\n                _context7.next = 19;\n                break;\n\n              case 17:\n                _context7.prev = 17;\n                _context7.t1 = _context7[\"catch\"](11);\n\n              case 19:\n                if (!(chainId != null)) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                getNetwork = getStatic(this.constructor, \"getNetwork\");\n                _context7.prev = 21;\n                return _context7.abrupt(\"return\", getNetwork(BigNumber.from(chainId).toNumber()));\n\n              case 25:\n                _context7.prev = 25;\n                _context7.t2 = _context7[\"catch\"](21);\n                return _context7.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  chainId: chainId,\n                  event: \"invalidNetwork\",\n                  serverError: _context7.t2\n                }));\n\n              case 28:\n                return _context7.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  event: \"noNetwork\"\n                }));\n\n              case 29:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 9], [11, 17], [21, 25]]);\n      }));\n    }\n  }, {\n    key: \"getSigner\",\n    value: function getSigner(addressOrIndex) {\n      return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n  }, {\n    key: \"getUncheckedSigner\",\n    value: function getUncheckedSigner(addressOrIndex) {\n      return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n  }, {\n    key: \"listAccounts\",\n    value: function listAccounts() {\n      var _this9 = this;\n\n      return this.send(\"eth_accounts\", []).then(function (accounts) {\n        return accounts.map(function (a) {\n          return _this9.formatter.address(a);\n        });\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this10 = this;\n\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: deepCopy(request),\n        provider: this\n      }); // We can expand this in the future to any call, but for now these\n      // are the biggest wins and do not require any serializing parameters.\n\n      var cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n      if (cache && this._cache[method]) {\n        return this._cache[method];\n      }\n\n      var result = fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          request: request,\n          response: result,\n          provider: _this10\n        });\n\n        return result;\n      }, function (error) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          error: error,\n          request: request,\n          provider: _this10\n        });\n\n        throw error;\n      }); // Cache the fetch, but clear it on the next event loop\n\n      if (cache) {\n        this._cache[method] = result;\n        setTimeout(function () {\n          _this10._cache[method] = null;\n        }, 0);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"prepareRequest\",\n    value: function prepareRequest(method, params) {\n      switch (method) {\n        case \"getBlockNumber\":\n          return [\"eth_blockNumber\", []];\n\n        case \"getGasPrice\":\n          return [\"eth_gasPrice\", []];\n\n        case \"getBalance\":\n          return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getTransactionCount\":\n          return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getCode\":\n          return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getStorageAt\":\n          return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\n        case \"sendTransaction\":\n          return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n        case \"getBlock\":\n          if (params.blockTag) {\n            return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n          } else if (params.blockHash) {\n            return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n          }\n\n          return null;\n\n        case \"getTransaction\":\n          return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n        case \"getTransactionReceipt\":\n          return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n        case \"call\":\n          {\n            var hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n            return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n              from: true\n            }), params.blockTag]];\n          }\n\n        case \"estimateGas\":\n          {\n            var _hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n\n            return [\"eth_estimateGas\", [_hexlifyTransaction(params.transaction, {\n              from: true\n            })]];\n          }\n\n        case \"getLogs\":\n          if (params.filter && params.filter.address != null) {\n            params.filter.address = getLowerCase(params.filter.address);\n          }\n\n          return [\"eth_getLogs\", [params.filter]];\n\n        default:\n          break;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var tx, feeData, args;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(method === \"call\" || method === \"estimateGas\")) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                tx = params.transaction;\n\n                if (!(tx && tx.type != null && BigNumber.from(tx.type).isZero())) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 6;\n                return this.getFeeData();\n\n              case 6:\n                feeData = _context8.sent;\n\n                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                  // Network doesn't know about EIP-1559 (and hence type)\n                  params = shallowCopy(params);\n                  params.transaction = shallowCopy(tx);\n                  delete params.transaction.type;\n                }\n\n              case 8:\n                args = this.prepareRequest(method, params);\n\n                if (args == null) {\n                  logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n                    operation: method\n                  });\n                }\n\n                _context8.prev = 10;\n                _context8.next = 13;\n                return this.send(args[0], args[1]);\n\n              case 13:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 16:\n                _context8.prev = 16;\n                _context8.t0 = _context8[\"catch\"](10);\n                return _context8.abrupt(\"return\", checkError(method, _context8.t0, params));\n\n              case 19:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[10, 16]]);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      if (event.tag === \"pending\") {\n        this._startPending();\n      }\n\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_startEvent\", this).call(this, event);\n    }\n  }, {\n    key: \"_startPending\",\n    value: function _startPending() {\n      if (this._pendingFilter != null) {\n        return;\n      }\n\n      var self = this;\n      var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n      this._pendingFilter = pendingFilter;\n      pendingFilter.then(function (filterId) {\n        function poll() {\n          self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n            if (self._pendingFilter != pendingFilter) {\n              return null;\n            }\n\n            var seq = Promise.resolve();\n            hashes.forEach(function (hash) {\n              // @TODO: This should be garbage collected at some point... How? When?\n              self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n              seq = seq.then(function () {\n                return self.getTransaction(hash).then(function (tx) {\n                  self.emit(\"pending\", tx);\n                  return null;\n                });\n              });\n            });\n            return seq.then(function () {\n              return timer(1000);\n            });\n          }).then(function () {\n            if (self._pendingFilter != pendingFilter) {\n              self.send(\"eth_uninstallFilter\", [filterId]);\n              return;\n            }\n\n            setTimeout(function () {\n              poll();\n            }, 0);\n            return null;\n          }).catch(function (error) {});\n        }\n\n        poll();\n        return filterId;\n      }).catch(function (error) {});\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n        this._pendingFilter = null;\n      }\n\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_stopEvent\", this).call(this, event);\n    } // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n\n  }, {\n    key: \"_cache\",\n    get: function get() {\n      if (this._eventLoopCache == null) {\n        this._eventLoopCache = {};\n      }\n\n      return this._eventLoopCache;\n    }\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"http:/\\/localhost:8545\";\n    }\n  }, {\n    key: \"hexlifyTransaction\",\n    value: function hexlifyTransaction(transaction, allowExtra) {\n      // Check only allowed properties are given\n      var allowed = shallowCopy(allowedTransactionKeys);\n\n      if (allowExtra) {\n        for (var key in allowExtra) {\n          if (allowExtra[key]) {\n            allowed[key] = true;\n          }\n        }\n      }\n\n      checkProperties(transaction, allowed);\n      var result = {}; // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n\n      [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n\n        var value = hexValue(transaction[key]);\n\n        if (key === \"gasLimit\") {\n          key = \"gas\";\n        }\n\n        result[key] = value;\n      });\n      [\"from\", \"to\", \"data\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n\n        result[key] = hexlify(transaction[key]);\n      });\n\n      if (transaction.accessList) {\n        result[\"accessList\"] = accessListify(transaction.accessList);\n      }\n\n      return result;\n    }\n  }]);\n\n  return JsonRpcProvider;\n}(BaseProvider);","map":null,"metadata":{},"sourceType":"module"}